{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL, ADMIN_REGISTER_FAIL, ADMIN_REGISTER_SUCCESS, ADMIN_LOGIN_SUCCESS, HOST_REGISTER_FAIL, HOST_REGISTER_SUCCESS, HOST_LOGIN_SUCCESS } from './types'; //check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register User\n\nexport const register = ({\n  name,\n  last_name,\n  city,\n  email,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    name,\n    last_name,\n    city,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n};\nexport const registerAdmin = ({\n  name,\n  last_name,\n  city,\n  email,\n  password,\n  role\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    name,\n    last_name,\n    city,\n    email,\n    password,\n    role\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: ADMIN_REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'ADMIN_REGISTER_FAIL'));\n    dispatch({\n      type: ADMIN_REGISTER_FAIL\n    });\n  });\n}; //login\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/auth', body, config).then(res => {\n    if (res.data.user.role === \"admin\") {\n      dispatch({\n        type: ADMIN_LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }\n\n    if (res.data.user.role === \"host\") {\n      dispatch({\n        type: HOST_LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    }\n\n    {\n      console.log(res.data.user.role);\n    }\n    {\n      console.log(res.data.user.ref);\n    }\n  }).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //logout user\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //get token from localstorage\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //if token=>add t headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n}; //Register Host\n\nexport const registerHost = ({\n  name,\n  last_name,\n  city,\n  email,\n  password,\n  ref,\n  role\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    name,\n    last_name,\n    city,\n    email,\n    password,\n    ref,\n    role\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: HOST_REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'HOST_REGISTER_FAIL'));\n    dispatch({\n      type: HOST_REGISTER_FAIL\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Yassine/Desktop/project/PROJECT/Project1 - Copie/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","ADMIN_REGISTER_FAIL","ADMIN_REGISTER_SUCCESS","ADMIN_LOGIN_SUCCESS","HOST_REGISTER_FAIL","HOST_REGISTER_SUCCESS","HOST_LOGIN_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","register","name","last_name","city","email","password","config","headers","body","JSON","stringify","post","response","status","registerAdmin","role","login","user","console","log","ref","logout","token","auth","registerHost"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,YAAR,QAA2B,gBAA3B;AAEA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,gBAPJ,EAQIC,aARJ,EASIC,mBATJ,EAUIC,sBAVJ,EAWIC,mBAXJ,EAYIC,kBAZJ,EAaIC,qBAbJ,EAcIC,kBAdJ,QAgBO,SAhBP,C,CAkBA;;AACA,OAAO,MAAMC,QAAQ,GAAC,MAAI,CAACC,QAAD,EAAUC,QAAV,KAAqB;AAC3C;AACAD,EAAAA,QAAQ,CAAC;AACLE,IAAAA,IAAI,EAAChB;AADA,GAAD,CAAR;AAGAH,EAAAA,KAAK,CACJoB,GADD,CACK,gBADL,EACsBC,WAAW,CAACH,QAAD,CADjC,EAECI,IAFD,CAEMC,GAAG,IAAEN,QAAQ,CAAC;AAChBE,IAAAA,IAAI,EAACjB,WADW;AAEhBsB,IAAAA,OAAO,EAACD,GAAG,CAACE;AAFI,GAAD,CAFnB,EAMCC,KAND,CAMOC,GAAG,IAAE;AACRV,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACf;AADA,KAAD,CAAR;AAGH,GAVD;AAWH,CAhBM,C,CAiBP;;AAEA,OAAO,MAAMwB,QAAQ,GAAC,CAAC;AAACC,EAAAA,IAAD;AAAMC,EAAAA,SAAN;AAAgBC,EAAAA,IAAhB;AAAqBC,EAAAA,KAArB;AAA2BC,EAAAA;AAA3B,CAAD,KAAwChB,QAAQ,IAAE;AACpE;AACA,QAAMiB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADC,GAAb,CAFoE,CAOpE;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AACvBT,IAAAA,IADuB;AAClBC,IAAAA,SADkB;AACRC,IAAAA,IADQ;AACHC,IAAAA,KADG;AACGC,IAAAA;AADH,GAAf,CAAZ;AAGAjC,EAAAA,KAAK,CAACuC,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,EACCZ,IADD,CACMC,GAAG,IAAEN,QAAQ,CAAC;AAChBE,IAAAA,IAAI,EAACX,gBADW;AAEhBgB,IAAAA,OAAO,EAACD,GAAG,CAACE;AAFI,GAAD,CADnB,EAKCC,KALD,CAKOC,GAAG,IAAE;AACPV,IAAAA,QAAQ,CAAChB,YAAY,CAAC0B,GAAG,CAACa,QAAJ,CAAaf,IAAd,EAAmBE,GAAG,CAACa,QAAJ,CAAaC,MAAhC,EAAuC,eAAvC,CAAb,CAAR;AACAxB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACV;AADA,KAAD,CAAR;AAGH,GAVF;AAWH,CAtBM;AAuBP,OAAO,MAAMiC,aAAa,GAAC,CAAC;AAACb,EAAAA,IAAD;AAAMC,EAAAA,SAAN;AAAgBC,EAAAA,IAAhB;AAAqBC,EAAAA,KAArB;AAA2BC,EAAAA,QAA3B;AAAoCU,EAAAA;AAApC,CAAD,KAA6C1B,QAAQ,IAAE;AAC9E;AACA,QAAMiB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADC,GAAb,CAF8E,CAO9E;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AACvBT,IAAAA,IADuB;AAClBC,IAAAA,SADkB;AACRC,IAAAA,IADQ;AACHC,IAAAA,KADG;AACGC,IAAAA,QADH;AACYU,IAAAA;AADZ,GAAf,CAAZ;AAGA3C,EAAAA,KAAK,CAACuC,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,EACCZ,IADD,CACMC,GAAG,IAAEN,QAAQ,CAAC;AAChBE,IAAAA,IAAI,EAACR,sBADW;AAEhBa,IAAAA,OAAO,EAACD,GAAG,CAACE;AAFI,GAAD,CADnB,EAKCC,KALD,CAKOC,GAAG,IAAE;AACPV,IAAAA,QAAQ,CAAChB,YAAY,CAAC0B,GAAG,CAACa,QAAJ,CAAaf,IAAd,EAAmBE,GAAG,CAACa,QAAJ,CAAaC,MAAhC,EAAuC,qBAAvC,CAAb,CAAR;AACAxB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACT;AADA,KAAD,CAAR;AAGH,GAVF;AAWH,CAtBM,C,CAuBP;;AACA,OAAO,MAAMkC,KAAK,GAAC,CAAC;AAACZ,EAAAA,KAAD;AAAOC,EAAAA;AAAP,CAAD,KAAoBhB,QAAQ,IAAE;AAC7C;AACA,QAAMiB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADC,GAAb,CAF6C,CAO7C;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AACvBN,IAAAA,KADuB;AACjBC,IAAAA;AADiB,GAAf,CAAZ;AAGAjC,EAAAA,KAAK,CAACuC,IAAN,CAAW,WAAX,EAAuBH,IAAvB,EAA6BF,MAA7B,EACCZ,IADD,CACMC,GAAG,IAAE;AAAC,QAAGA,GAAG,CAACE,IAAJ,CAASoB,IAAT,CAAcF,IAAd,KAAqB,OAAxB,EAAgC;AAAC1B,MAAAA,QAAQ,CAAC;AAClDE,QAAAA,IAAI,EAACP,mBAD6C;AAElDY,QAAAA,OAAO,EAACD,GAAG,CAACE;AAFsC,OAAD,CAAR;AAG1C;;AACH,QAAGF,GAAG,CAACE,IAAJ,CAASoB,IAAT,CAAcF,IAAd,KAAqB,MAAxB,EAA+B;AAAC1B,MAAAA,QAAQ,CAAC;AACrCE,QAAAA,IAAI,EAACJ,kBADgC;AAErCS,QAAAA,OAAO,EAACD,GAAG,CAACE;AAFyB,OAAD,CAAR;AAG7B,KAHH,MAII;AAACR,MAAAA,QAAQ,CAAC;AAACE,QAAAA,IAAI,EAACd,aAAN;AACVmB,QAAAA,OAAO,EAACD,GAAG,CAACE;AADF,OAAD,CAAR;AACkB;;AAAA;AAACqB,MAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACE,IAAJ,CAASoB,IAAT,CAAcF,IAA1B;AAAgC;AAAA;AAACG,MAAAA,OAAO,CAACC,GAAR,CAAYxB,GAAG,CAACE,IAAJ,CAASoB,IAAT,CAAcG,GAA1B;AAA+B;AAAE,GAV1F,EAaCtB,KAbD,CAaOC,GAAG,IAAE;AACPV,IAAAA,QAAQ,CAAChB,YAAY,CAAC0B,GAAG,CAACa,QAAJ,CAAaf,IAAd,EAAmBE,GAAG,CAACa,QAAJ,CAAaC,MAAhC,EAAuC,YAAvC,CAAb,CAAR;AACAxB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACb;AADA,KAAD,CAAR;AAGH,GAlBF;AAoBH,CA/BM,C,CAgCP;;AACA,OAAO,MAAM2C,MAAM,GAAE,MAAI;AACrB,SAAO;AACH9B,IAAAA,IAAI,EAACZ;AADF,GAAP;AAGH,CAJM,C,CAMP;;AACA,OAAO,MAAMc,WAAW,GAAEH,QAAD,IAAY;AACjC;AACA,QAAMgC,KAAK,GAAChC,QAAQ,GAAGiC,IAAX,CAAgBD,KAA5B,CAFiC,CAGjC;;AACA,QAAMhB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADC,GAAb,CAJiC,CAUjC;;AACA,MAAGe,KAAH,EAAS;AACLhB,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAA+Be,KAA/B;AACH;;AACD,SAAOhB,MAAP;AACH,CAfM,C,CAiBP;;AAEA,OAAO,MAAMkB,YAAY,GAAC,CAAC;AAACvB,EAAAA,IAAD;AAAMC,EAAAA,SAAN;AAAgBC,EAAAA,IAAhB;AAAqBC,EAAAA,KAArB;AAA2BC,EAAAA,QAA3B;AAAoCe,EAAAA,GAApC;AAAwCL,EAAAA;AAAxC,CAAD,KAAiD1B,QAAQ,IAAE;AACjF;AACA,QAAMiB,MAAM,GAAC;AACTC,IAAAA,OAAO,EAAC;AACJ,sBAAe;AADX;AADC,GAAb,CAFiF,CAOjF;;AACA,QAAMC,IAAI,GAAEC,IAAI,CAACC,SAAL,CAAe;AACvBT,IAAAA,IADuB;AAClBC,IAAAA,SADkB;AACRC,IAAAA,IADQ;AACHC,IAAAA,KADG;AACGC,IAAAA,QADH;AACYe,IAAAA,GADZ;AACgBL,IAAAA;AADhB,GAAf,CAAZ;AAGA3C,EAAAA,KAAK,CAACuC,IAAN,CAAW,YAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,EACCZ,IADD,CACMC,GAAG,IAAEN,QAAQ,CAAC;AAChBE,IAAAA,IAAI,EAACL,qBADW;AAEhBU,IAAAA,OAAO,EAACD,GAAG,CAACE;AAFI,GAAD,CADnB,EAKCC,KALD,CAKOC,GAAG,IAAE;AACPV,IAAAA,QAAQ,CAAChB,YAAY,CAAC0B,GAAG,CAACa,QAAJ,CAAaf,IAAd,EAAmBE,GAAG,CAACa,QAAJ,CAAaC,MAAhC,EAAuC,oBAAvC,CAAb,CAAR;AACAxB,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAACN;AADA,KAAD,CAAR;AAGH,GAVF;AAWH,CAtBM","sourcesContent":["import axios from 'axios';\nimport {returnErrors} from './errorActions'\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    ADMIN_REGISTER_FAIL,\n    ADMIN_REGISTER_SUCCESS,\n    ADMIN_LOGIN_SUCCESS,\n    HOST_REGISTER_FAIL,\n    HOST_REGISTER_SUCCESS,\n    HOST_LOGIN_SUCCESS\n\n} from './types'\n\n//check token and load user\nexport const loadUser=()=>(dispatch,getState)=>{\n    //user loading\n    dispatch({\n        type:USER_LOADING\n    });\n    axios\n    .get('/api/auth/user',tokenConfig(getState))\n    .then(res=>dispatch({\n        type:USER_LOADED,\n        payload:res.data\n    }))\n    .catch(err=>{\n        dispatch({\n            type:AUTH_ERROR\n        });\n    })\n}\n//Register User\n\nexport const register=({name,last_name,city,email,password})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        name,last_name,city,email,password\n    })\n    axios.post('/api/users',body, config)\n    .then(res=>dispatch({\n        type:REGISTER_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n         dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'));\n         dispatch({\n             type:REGISTER_FAIL\n         });\n     });\n};\nexport const registerAdmin=({name,last_name,city,email,password,role})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        name,last_name,city,email,password,role\n    })\n    axios.post('/api/users',body, config)\n    .then(res=>dispatch({\n        type:ADMIN_REGISTER_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n         dispatch(returnErrors(err.response.data,err.response.status,'ADMIN_REGISTER_FAIL'));\n         dispatch({\n             type:ADMIN_REGISTER_FAIL\n         });\n     });\n};\n//login\nexport const login=({email,password})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        email,password\n    })\n    axios.post('/api/auth',body, config)\n    .then(res=>{if(res.data.user.role===\"admin\"){dispatch({\n        type:ADMIN_LOGIN_SUCCESS,\n        payload:res.data\n    })}\n    if(res.data.user.role===\"host\"){dispatch({\n        type:HOST_LOGIN_SUCCESS,\n        payload:res.data\n    })}\n    else{dispatch({type:LOGIN_SUCCESS,\n        payload:res.data})}{console.log(res.data.user.role)}{console.log(res.data.user.ref)} }\n    )\n    \n    .catch(err=>{\n         dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'));\n         dispatch({\n             type:LOGIN_FAIL\n         });\n     });\n     \n};\n//logout user\nexport const logout =()=>{\n    return {\n        type:LOGOUT_SUCCESS\n    }\n}\n\n//setup config/headers and token\nexport const tokenConfig=(getState)=>{\n    //get token from localstorage\n    const token=getState().auth.token;\n    //headers\n    const config={\n        headers:{\n            \"content-type\":\"application/json\"\n        }\n    }\n\n    //if token=>add t headers\n    if(token){\n        config.headers['x-auth-token']=token;\n    }\n    return config;\n}\n\n//Register Host\n\nexport const registerHost=({name,last_name,city,email,password,ref,role})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        name,last_name,city,email,password,ref,role\n    })\n    axios.post('/api/users',body, config)\n    .then(res=>dispatch({\n        type:HOST_REGISTER_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n         dispatch(returnErrors(err.response.data,err.response.status,'HOST_REGISTER_FAIL'));\n         dispatch({\n             type:HOST_REGISTER_FAIL\n         });\n     });\n};"]},"metadata":{},"sourceType":"module"}