{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from './types'; //check token and load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  //user loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config); // .then(res=>dispatch({\n  //     type:REGISTER_SUCCESS,\n  //     payload:res.data\n  // }))\n  // .catch(err=>{\n  //      dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'));\n  //      dispatch({\n  //          type:REGISTER_FAIL\n  //      });\n  //  });\n}; //login\n\nexport const login = ({\n  email,\n  password\n}) => dispatch => {\n  //headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; //request body\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  axios.post('/api/auth', body, config).then(res => dispatch({\n    type: LOGIN_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'LOGIN_FAIL'));\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  });\n}; //logout user\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; //setup config/headers and token\n\nexport const tokenConfig = getState => {\n  //get token from localstorage\n  const token = getState().auth.token; //headers\n\n  const config = {\n    headers: {\n      \"content-type\": \"application/json\"\n    }\n  }; //if token=>add t headers\n\n  if (token) {\n    config.headers['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["C:/Users/Yassine/Desktop/project/PROJECT/Project1/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","login","logout","token","auth"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport {returnErrors} from './errorActions'\n\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT_SUCCESS,\n    REGISTER_SUCCESS,\n    REGISTER_FAIL\n} from './types'\n\n//check token and load user\nexport const loadUser=()=>(dispatch,getState)=>{\n    //user loading\n    dispatch({\n        type:USER_LOADING\n    });\n    axios\n    .get('/api/auth/user',tokenConfig(getState))\n    .then(res=>dispatch({\n        type:USER_LOADED,\n        payload:res.data\n    }))\n    .catch(err=>{\n        dispatch(returnErrors(err.response.data,err.response.status))\n        dispatch({\n            type:AUTH_ERROR\n        });\n    })\n}\n//Register User\n\nexport const register=({name,email,password})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        name,email,password\n    })\n    axios.post('/api/users',body, config)\n    // .then(res=>dispatch({\n    //     type:REGISTER_SUCCESS,\n    //     payload:res.data\n    // }))\n    // .catch(err=>{\n    //      dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'));\n    //      dispatch({\n    //          type:REGISTER_FAIL\n    //      });\n    //  });\n};\n//login\nexport const login=({email,password})=>dispatch=>{\n    //headers\n    const config={\n        headers:{\n            'Content-Type':'application/json'\n        }\n    }\n    //request body\n    const body =JSON.stringify({\n        email,password\n    })\n    axios.post('/api/auth',body, config)\n    .then(res=>dispatch({\n        type:LOGIN_SUCCESS,\n        payload:res.data\n    }))\n    .catch(err=>{\n         dispatch(returnErrors(err.response.data,err.response.status,'LOGIN_FAIL'));\n         dispatch({\n             type:LOGIN_FAIL\n         });\n     });\n};\n//logout user\nexport const logout =()=>{\n    return {\n        type:LOGOUT_SUCCESS\n    }\n}\n\n//setup config/headers and token\nexport const tokenConfig=(getState)=>{\n    //get token from localstorage\n    const token=getState().auth.token;\n    //headers\n    const config={\n        headers:{\n            \"content-type\":\"application/json\"\n        }\n    }\n\n    //if token=>add t headers\n    if(token){\n        config.headers['x-auth-token']=token;\n    }\n    return config;\n}"]},"metadata":{},"sourceType":"module"}